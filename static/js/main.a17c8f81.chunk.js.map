{"version":3,"sources":["App.js","components/Login.js","serviceWorker.js","index.js","logo.svg"],"names":["App","dashboard","DashboardLayout","cellSpacing","columns","panels","id","sizeX","sizeY","row","col","content","appendTo","count","NumericTextBox","placeholder","floatLabelType","value","min","max","idValue","DropDownList","dataSource","column","document","getElementById","onclick","panel","toString","addPanel","push","refresh","removePanel","splice","indexOf","login","React","Boolean","window","location","hostname","match","ReactDOM","render","navigator","serviceWorker","ready","then","registration","unregister","module","exports"],"mappings":"mPAyBeA,I,6DCVVC,EAAY,IAAIC,IAAgB,CAClCC,YAAa,CAAC,GAAI,IAClBC,QAAS,EACTC,OAAQ,CACN,CACEC,GAAI,SACJC,MAAO,EACPC,MAAO,EACPC,IAAK,EACLC,IAAK,EACLC,QAAS,gCAEX,CACEL,GAAI,SACJC,MAAO,EACPC,MAAO,EACPC,IAAK,EACLC,IAAK,EACLC,QAAS,gCAEX,CACEL,GAAI,SACJC,MAAO,EACPC,MAAO,EACPC,IAAK,EACLC,IAAK,EACLC,QAAS,gCAEX,CACEL,GAAI,SACJC,MAAO,EACPC,MAAO,EACPC,IAAK,EACLC,IAAK,EACLC,QAAS,gCAEX,CACEL,GAAI,SACJC,MAAO,EACPC,MAAO,EACPC,IAAK,EACLC,IAAK,EACLC,QAAS,gCAEX,CACEL,GAAI,SACJC,MAAO,EACPC,MAAO,EACPC,IAAK,EACLC,IAAK,EACLC,QAAS,gCAEX,CACEL,GAAI,SACJC,MAAO,EACPC,MAAO,EACPC,IAAK,EACLC,IAAK,EACLC,QAAQ,0VAIfV,EAAUW,SAAS,qBAEnB,IAAIC,EAAQ,EAURN,EAAQ,IAAIO,IAAe,CAC7BC,YAAa,QACbC,eAAgB,QAChBC,MAAO,EACPC,IAAK,EACLC,IAAK,IAGPZ,EAAMK,SAAS,UAEf,IAAIQ,EAAU,IAAIC,IAAa,CAC7BC,WApBS,CACT,SACA,SACA,SACA,SACA,SACA,SACA,YAeFF,EAAQR,SAAS,UAGjB,IAAIJ,EAAQ,IAAIM,IAAe,CAE7BC,YAAa,QACbC,eAAgB,QAChBC,MAAO,EACPC,IAAK,EACLC,IAAK,IAGPX,EAAMI,SAAS,UAEf,IAAIH,EAAM,IAAIK,IAAe,CAE3BC,YAAa,QACbC,eAAgB,QAChBC,MAAO,EACPC,IAAK,EACLC,IAAK,IAGPV,EAAIG,SAAS,QAEb,IAAIW,EAAS,IAAIT,IAAe,CAE9BC,YAAa,QACbC,eAAgB,QAChBC,MAAO,EACPC,IAAK,EACLC,IAAK,IAGPI,EAAOX,SAAS,WAEhBY,SAASC,eAAe,OAAOC,QAAU,WACrC,IAAIC,EAAQ,CACRrB,GAAI,QAAUO,EAAMe,WACpBrB,MAAOA,EAAMU,MACbT,MAAOA,EAAMS,MACbR,IAAKA,EAAIQ,MACTP,IAAKa,EAAON,MACZN,QAAS,wBAA0BE,EAAQ,UAE/CZ,EAAU4B,SAASF,GACnBd,GAAgB,EAChBO,EAAQE,WAAWQ,KAAKH,EAAMrB,IAC9Bc,EAAQW,WAGZP,SAASC,eAAe,UAAUC,QAAU,WACxCzB,EAAU+B,YAAYZ,EAAQH,MAAMW,YACpCR,EAAQE,WAAWW,OAAQb,EAAQE,WAAYY,QAAQd,EAAQH,MAAMW,YAAa,GAClFR,EAAQW,UACRX,EAAQH,MAAQ,M,IAGCkB,E,iLAGb,OACI,gC,GAJuBC,aCpJfC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCXNC,IAASC,OAAO,kBAAC,EAAD,MACZnB,SAASC,eAAe,SD2HtB,kBAAmBmB,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,iB,kBErInBC,EAAOC,QAAU,IAA0B,mC","file":"static/js/main.a17c8f81.chunk.js","sourcesContent":["import React from 'react';\nimport logo from './logo.svg';\nimport './App.css';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n        <img src={logo} className=\"App-logo\" alt=\"logo\" />\n        <p>\n          Edit <code>src/App.js</code> and save to reload.\n        </p>\n        <a\n          className=\"App-link\"\n          href=\"https://reactjs.org\"\n          target=\"_blank\"\n          rel=\"noopener noreferrer\"\n        >\n          Learn React\n        </a>\n      </header>\n    </div>\n  );\n}\n\nexport default App;\n","import * as React from 'react';\r\nimport {ChartComponent,SeriesDirective,ColumnSeries,Legend,Inject,SeriesCollectionDirective,\r\nCategory, Tooltip} from '@syncfusion/ej2-react-charts';\r\nimport { DashboardLayout } from \"@syncfusion/ej2-layouts\";\r\nimport { DropDownList } from \"@syncfusion/ej2-dropdowns\";\r\nimport { Button } from \"@syncfusion/ej2-buttons\";\r\nimport { NumericTextBox } from \"@syncfusion/ej2-inputs\";\r\n\r\nexport let data1 = [\r\n    { x: '2014', y:111.1},\r\n    { x: '2015', y:127.3},\r\n    { x: '2016', y: 143.3 },\r\n    { x: '2017', y: 157.3 }\r\n];\r\n\r\n let dashboard = new DashboardLayout({\r\n   cellSpacing: [10, 10],\r\n   columns: 5,\r\n   panels: [\r\n     {\r\n       id: \"Panel0\",\r\n       sizeX: 1,\r\n       sizeY: 1,\r\n       row: 0,\r\n       col: 0,\r\n       content: '<div class=\"content\">0</div>'\r\n     },\r\n     {\r\n       id: \"Panel1\",\r\n       sizeX: 3,\r\n       sizeY: 2,\r\n       row: 0,\r\n       col: 1,\r\n       content: '<div class=\"content\">1</div>'\r\n     },\r\n     {\r\n       id: \"Panel2\",\r\n       sizeX: 1,\r\n       sizeY: 3,\r\n       row: 0,\r\n       col: 4,\r\n       content: '<div class=\"content\">2</div>'\r\n     },\r\n     {\r\n       id: \"Panel3\",\r\n       sizeX: 1,\r\n       sizeY: 1,\r\n       row: 1,\r\n       col: 0,\r\n       content: '<div class=\"content\">3</div>'\r\n     },\r\n     {\r\n       id: \"Panel4\",\r\n       sizeX: 2,\r\n       sizeY: 1,\r\n       row: 2,\r\n       col: 0,\r\n       content: '<div class=\"content\">4</div>'\r\n     },\r\n     {\r\n       id: \"Panel5\",\r\n       sizeX: 1,\r\n       sizeY: 1,\r\n       row: 2,\r\n       col: 2,\r\n       content: '<div class=\"content\">5</div>'\r\n     },\r\n     {\r\n       id: \"Panel6\",\r\n       sizeX: 1,\r\n       sizeY: 1,\r\n       row: 2,\r\n       col: 3,\r\n       content:'<div><ChartComponent id=\"chart\" primaryXAxis={{valueType: \"Category\",isIndexed: true}}tooltip={{enable:true}}><Inject services={[ColumnSeries, Category, Legend, Tooltip]}/><SeriesCollectionDirective><SeriesDirective dataSource={data1} xName=\"x\" yName=\"y\" name=\"New Charts\" type=\"Column\"/></SeriesCollectionDirective></ChartComponent></div>'\r\n     }\r\n   ]\r\n });\r\ndashboard.appendTo(\"#dashboard_layout\");\r\n\r\nlet count = 7;\r\nlet data = [\r\n  \"Panel0\",\r\n  \"Panel1\",\r\n  \"Panel2\",\r\n  \"Panel3\",\r\n  \"Panel4\",\r\n  \"Panel5\",\r\n  \"Panel6\"\r\n];\r\nlet sizeX = new NumericTextBox({\r\n  placeholder: \"Ex: 1\",\r\n  floatLabelType: \"Never\",\r\n  value: 1,\r\n  min: 1,\r\n  max: 5\r\n});\r\n\r\nsizeX.appendTo(\"#sizex\");\r\n\r\nlet idValue = new DropDownList({\r\n  dataSource: data\r\n});\r\nidValue.appendTo(\"#value\");\r\n\r\n\r\nlet sizeY = new NumericTextBox({\r\n  //set the data to dataSource property\r\n  placeholder: \"Ex: 1\",\r\n  floatLabelType: \"Never\",\r\n  value: 1,\r\n  min: 1,\r\n  max: 5\r\n});\r\n\r\nsizeY.appendTo(\"#sizey\");\r\n\r\nlet row = new NumericTextBox({\r\n  //set the data to dataSource property\r\n  placeholder: \"Ex: 1\",\r\n  floatLabelType: \"Never\",\r\n  value: 0,\r\n  min: 0,\r\n  max: 5\r\n});\r\n\r\nrow.appendTo(\"#row\");\r\n\r\nlet column = new NumericTextBox({\r\n  //set the data to dataSource property\r\n  placeholder: \"Ex: 1\",\r\n  floatLabelType: \"Never\",\r\n  value: 0,\r\n  min: 0,\r\n  max: 4\r\n});\r\n\r\ncolumn.appendTo(\"#column\");\r\n\r\ndocument.getElementById('add').onclick = () => {\r\n    let panel = {\r\n        id: \"Panel\" + count.toString(),\r\n        sizeX: sizeX.value,\r\n        sizeY: sizeY.value,\r\n        row: row.value,\r\n        col: column.value,\r\n        content: \"<div class='content'>\" + count + \"</div>\"\r\n    }\r\n    dashboard.addPanel(panel);\r\n    count = count + 1;\r\n    idValue.dataSource.push(panel.id);\r\n    idValue.refresh();\r\n};\r\n\r\ndocument.getElementById('remove').onclick = () => {\r\n    dashboard.removePanel(idValue.value.toString());\r\n    idValue.dataSource.splice((idValue.dataSource).indexOf(idValue.value.toString()), 1);\r\n    idValue.refresh();\r\n    idValue.value = null;\r\n}\r\n\r\nexport default class login extends React.Component{\r\n\r\n    render(){\r\n        return(\r\n            <div>\r\n                {/* <ChartComponent \r\n                id='chart' \r\n                primaryXAxis={{\r\n                    valueType: 'Category',\r\n                    isIndexed: true\r\n                }}\r\n                tooltip={{enable:true}}\r\n                >\r\n                    <Inject services={[ColumnSeries, Category, Legend, Tooltip]} />\r\n                    <SeriesCollectionDirective>\r\n                        <SeriesDirective dataSource={data1} xName='x' yName='y' name='New Charts' type='Column'/>\r\n                    </SeriesCollectionDirective>\r\n                </ChartComponent> */}\r\n            </div>\r\n        )\r\n    }\r\n\r\n}","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport Login from './components/Login';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<Login />, \n    document.getElementById(\"root\"));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";"],"sourceRoot":""}